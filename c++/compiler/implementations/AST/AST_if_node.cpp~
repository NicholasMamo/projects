//
// Created by memonick on 11/04/2016.
//

#include "../../headers/AST/AST_if_node.h"

/**
 * Initialize the node with the given level
 * level            the level of the node
 */
AST_if_node::AST_if_node(unsigned level) : AST_statement_node(level) {
    this->set_level(level);
}

/**
 * Delete the node
 */
AST_if_node::~AST_if_node() {
    if (this->expression != nullptr) {
        delete this->expression;
        this->expression = nullptr;
    }
    if (this->block != nullptr) {
        delete this->block;
        this->block = nullptr;
    }
    if (this->else_block != nullptr) {
        delete this->else_block;
        this->else_block = nullptr;
    }
}

/**
 * Set the expression of the if node
 * expression_node  the expression node of the if node
 */
void AST_if_node::set_expression(AST_node * expression_node) {
    this->expression = expression_node;
}

/**
 * Set the block of the if node
 * block            the block of the if node
 */
void AST_if_node::set_block(AST_block_node * block) {
    this->block = block;
}

/**
 * Set the else block of the if node
 * else_block       the alternate block of the if node
 */
void AST_if_node::set_else_block(AST_block_node * else_block) {
    this->else_block = else_block;
}

/**
 * Get the expression of the if node
 * return           the expression of the if node
 */
AST_node * AST_if_node::get_expression() {
    return this->expression;
}

/**
 * Get the block of the if node
 * return           the block of the if node
 */
AST_block_node * AST_if_node::get_block() {
    return this->block;
}

/**
 * Get the alternate block of the if node
 * return           the alternate block of the if node
 */
AST_block_node * AST_if_node::get_else_block() {
    return this->else_block;
}

/**
 * Allow the given visitor to visit this node
 * v                the visitor that will visit this node
 */
string AST_if_node::accept(printer_visitor * v) {
    return v->visit(this);
}

/**
 * Allow the given visitor to visit this node
 * v                the visitor that will visit this node
 */
var_type AST_if_node::accept(semantic_visitor * v) {
    return v->visit(this);
}

/**
 * Set the level of the node, recursively changing the level of its children
 * level            the new level of the node
 */
void AST_if_node::set_level(unsigned level) {
    this->level = level;
    if (this->expression != nullptr) {
        this->expression->set_level(level + 1);
    }
    if (this->block != nullptr) {
        this->block->set_level(level + 1);
    }
    if (this->else_block != nullptr) {
        this->else_block->set_level(level + 1);
    }
}